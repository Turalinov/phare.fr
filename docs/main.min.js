(function() {
  console.log(1);
  const menuToggle = document.querySelector('.menu__toggle');
  const menu = document.querySelector('.menu');
  const body = document.querySelector('body')

  menuToggle.addEventListener('click', (e) => {
    e.preventDefault();
    menu.classList.toggle('menu--opened')
    body.classList.toggle('body--locked')
  })
})();

(function() {
  // console.log('2');
  // const video = document.querySelector('.video');
  // const videoBtn = document.querySelector('.video__btn');
  // videoBtn.addEventListener('click', function() {

  //   // 2. This code loads the IFrame Player API code asynchronously.
  //   var tag = document.createElement('script');

  //   tag.src = "https://www.youtube.com/iframe_api";
  //   var firstScriptTag = document.getElementsByTagName('script')[0];

  //   console.log(firstScriptTag.parentNode);
  //   firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  //   // 3. This function creates an <iframe> (and YouTube player)
  //   //    after the API code downloads.
  //   var player;

  //   function onYouTubeIframeAPIReady() {
  //     player = new YT.Player('video__player', {
  //       height: '360',
  //       width: '640',
  //       videoId: 'M7lc1UVf-VE',
  //       events: {
  //         'onReady': onPlayerReady,
  //         'onStateChange': onPlayerStateChange
  //       }
  //     });
  //   }

  //   // 4. The API will call this function when the video player is ready.
  //   function onPlayerReady(event) {
  //     event.target.playVideo();
  //   }

  //   // 5. The API calls this function when the player's state changes.
  //   //    The function indicates that when playing a video (state=1),
  //   //    the player should play for six seconds and then stop.
  //   var done = false;

  //   function onPlayerStateChange(event) {
  //     if (event.data == YT.PlayerState.PLAYING && !done) {
  //       setTimeout(stopVideo, 6000);
  //       done = true;
  //     }
  //   }

  //   function stopVideo() {
  //     player.stopVideo();
  //   }

  // })


})()

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKDEpO1xuICBjb25zdCBtZW51VG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnVfX3RvZ2dsZScpO1xuICBjb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnUnKTtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKVxuXG4gIG1lbnVUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBtZW51LmNsYXNzTGlzdC50b2dnbGUoJ21lbnUtLW9wZW5lZCcpXG4gICAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdib2R5LS1sb2NrZWQnKVxuICB9KVxufSkoKTtcblxuKGZ1bmN0aW9uKCkge1xuICAvLyBjb25zb2xlLmxvZygnMicpO1xuICAvLyBjb25zdCB2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy52aWRlbycpO1xuICAvLyBjb25zdCB2aWRlb0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy52aWRlb19fYnRuJyk7XG4gIC8vIHZpZGVvQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cbiAgLy8gICAvLyAyLiBUaGlzIGNvZGUgbG9hZHMgdGhlIElGcmFtZSBQbGF5ZXIgQVBJIGNvZGUgYXN5bmNocm9ub3VzbHkuXG4gIC8vICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIC8vICAgdGFnLnNyYyA9IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaVwiO1xuICAvLyAgIHZhciBmaXJzdFNjcmlwdFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcblxuICAvLyAgIGNvbnNvbGUubG9nKGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUpO1xuICAvLyAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpO1xuXG4gIC8vICAgLy8gMy4gVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuIDxpZnJhbWU+IChhbmQgWW91VHViZSBwbGF5ZXIpXG4gIC8vICAgLy8gICAgYWZ0ZXIgdGhlIEFQSSBjb2RlIGRvd25sb2Fkcy5cbiAgLy8gICB2YXIgcGxheWVyO1xuXG4gIC8vICAgZnVuY3Rpb24gb25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkoKSB7XG4gIC8vICAgICBwbGF5ZXIgPSBuZXcgWVQuUGxheWVyKCd2aWRlb19fcGxheWVyJywge1xuICAvLyAgICAgICBoZWlnaHQ6ICczNjAnLFxuICAvLyAgICAgICB3aWR0aDogJzY0MCcsXG4gIC8vICAgICAgIHZpZGVvSWQ6ICdNN2xjMVVWZi1WRScsXG4gIC8vICAgICAgIGV2ZW50czoge1xuICAvLyAgICAgICAgICdvblJlYWR5Jzogb25QbGF5ZXJSZWFkeSxcbiAgLy8gICAgICAgICAnb25TdGF0ZUNoYW5nZSc6IG9uUGxheWVyU3RhdGVDaGFuZ2VcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSk7XG4gIC8vICAgfVxuXG4gIC8vICAgLy8gNC4gVGhlIEFQSSB3aWxsIGNhbGwgdGhpcyBmdW5jdGlvbiB3aGVuIHRoZSB2aWRlbyBwbGF5ZXIgaXMgcmVhZHkuXG4gIC8vICAgZnVuY3Rpb24gb25QbGF5ZXJSZWFkeShldmVudCkge1xuICAvLyAgICAgZXZlbnQudGFyZ2V0LnBsYXlWaWRlbygpO1xuICAvLyAgIH1cblxuICAvLyAgIC8vIDUuIFRoZSBBUEkgY2FsbHMgdGhpcyBmdW5jdGlvbiB3aGVuIHRoZSBwbGF5ZXIncyBzdGF0ZSBjaGFuZ2VzLlxuICAvLyAgIC8vICAgIFRoZSBmdW5jdGlvbiBpbmRpY2F0ZXMgdGhhdCB3aGVuIHBsYXlpbmcgYSB2aWRlbyAoc3RhdGU9MSksXG4gIC8vICAgLy8gICAgdGhlIHBsYXllciBzaG91bGQgcGxheSBmb3Igc2l4IHNlY29uZHMgYW5kIHRoZW4gc3RvcC5cbiAgLy8gICB2YXIgZG9uZSA9IGZhbHNlO1xuXG4gIC8vICAgZnVuY3Rpb24gb25QbGF5ZXJTdGF0ZUNoYW5nZShldmVudCkge1xuICAvLyAgICAgaWYgKGV2ZW50LmRhdGEgPT0gWVQuUGxheWVyU3RhdGUuUExBWUlORyAmJiAhZG9uZSkge1xuICAvLyAgICAgICBzZXRUaW1lb3V0KHN0b3BWaWRlbywgNjAwMCk7XG4gIC8vICAgICAgIGRvbmUgPSB0cnVlO1xuICAvLyAgICAgfVxuICAvLyAgIH1cblxuICAvLyAgIGZ1bmN0aW9uIHN0b3BWaWRlbygpIHtcbiAgLy8gICAgIHBsYXllci5zdG9wVmlkZW8oKTtcbiAgLy8gICB9XG5cbiAgLy8gfSlcblxuXG59KSgpXG4iXX0=
